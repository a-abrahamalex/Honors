letters[[[2]]][[300]][4]
letters[[2]][300]
letters[[2]][300][2]
letters[[2]][300,2]
letters[2][300]
length(letters[[2]][300])
rm(list = ls())
source('~/Desktop/Experimental.R')
source('~/Desktop/Experimental.R')
listTable
rm(list = ls())
source('~/Desktop/Experimental.R')
listTableGraphing
listTableGraphing[[3]] = 1
listTableGraphing
length(listTableGraphing)
length(seq(from = 0, to = 10^7, by = 10))
freePhages
bacteriaDensity
w = c(1,2,3,42,2)
intersect(seq(0,500,3), seq(0,500, 2))
listTableGraphing = list(c(1,2,3), c(3,4,5), c(49586,32))
listTableGraphing
listTableGraphing[[-1]]
listTableGraphing[-1]
listTableGraphing = listTableGraphing[-1]
listTableGraphing[[1]]
length(seq(from = 0, to = 10^7, by = 10))
listTableGraphing = listTableGraphing[[-1]]
listTableGraphing
listTableGraphing = list(c(1,2,3), c(3,4,5), c(49586,32))
listTableGraphing[[1:length(listTableGraphing)]]
listTableGraphing[[1:length(listTableGraphing)]][3]
listTableGraphing
listTableGraphing = listTableGraphing[[4]]
listTableGraphing[[4]] = rep(0,4)
listTableGraphing
round(runif(1, min = 1, max = 10))
round(runif(1, min = 1, max = 10))
round(runif(1, min = 1, max = 10))
round(runif(1, min = 1, max = 10))
rm(list = ls())
source('~/Desktop/Experimental.R')
l
seq(0, 10^7, 10)
numberOfDemes
listTableGraphing = list(rep(c(rep(0, length(seq(0, 10^7, 10)))), numberOfDemes)  )
listTableGraphing
u = 3
listTableGraphing[[u]] = c(rep(0, length(seq(0, 10^7, 10))), 1, whichDeme[u] ,phageProgeny[u])
listTableGraphing
listTableGraphing[length(listTableGraphing)]
listTableGraphing[[3]][length(listTableGraphing)]
phageProgeny[u]
listTableGraphing[[3]][length(listTableGraphing[[3]])]
listTableGraphing[[3]][length(listTableGraphing[[3]]) - 1]
rm(list = ls())
source('~/Desktop/Experimental.R')
l
t
listTableGraphing[[-l]]
listTableGraphing[-l]
listTableGraphing[-l]
listTableGraphing = listTableGraphing[-l]
listTableGraphing
listTableGraphing
listTableGraphing[[-l]]
l
listTableGraphing[[1]]
listTableGraphing[[-l]]
listTableGraphing[[-l]]
length(listTableGraphing)
listTableGraphing[-10]
listTableGraphing[-1]
listTableGraphing = listTableGraphing[[-1]]
listTableGraphing = listTableGraphing[[2:length(listTableGraphing)]]
?list
listTableGraphing
listTableGraphing[[1]] = NULL
listTableGraphing
rm(list = ls())
source('~/Desktop/Experimental.R')
l
length(listTableGraphing
length(listTableGraphing)
comparisonList
listTableGraphing
l
rm(list = ls())
rm(list = ls())
source('~/Desktop/Experimental.R')
t
length(listTableGraphing)
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
p
listTableGraphing
rm(list = ls())
source('~/Desktop/Experimental.R')
p
listTableGraphing
rm(list = ls())
source('~/Desktop/Experimental.R')
p
length(which(listTableGraphing[[p]][length(listTableGraphing[[p]])] == phageProgeny))
listTableGraphing[[p]][which(seq(from = 0, to = 10^7, by = 100) == t[z])]
freePhages[intersect(which(phageProgeny == listTableGraphing[[p]][length(listTableGraphing[[p]])]), which(whichDeme == listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]))]
which(phageProgeny == listTableGraphing[[p]][length(listTableGraphing[[p]])])
which(whichDeme == listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]))
which(whichDeme == listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1])
listTableGraphing[[p]][length(listTableGraphing[[p]])]
phageProgeny
listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]
whichDeme
phageProgeny
listTableGraphing
freePhages
which(phageProgeny == listTableGraphing[[p]][length(listTableGraphing[[p]])])
which(whichDeme == listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1])
phageProgeny
whichDeme
p
listTableGraphing[[p]][length(listTableGraphing[[p]])]
listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]
which(listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1] == 4)
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 1
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 2
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 3
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 4
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 5
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 6
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 11
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 12
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 13
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 14
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 15
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 16
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 17
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 18
listTableGraphing[[p]][length(listTableGraphing[[p]])]
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 19
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 20
listTableGraphing[[p]][length(listTableGraphing[[p]])]
p = 21
listTableGraphing[[p]][length(listTableGraphing[[p]])]
t
rm(list = ls())
source('~/Desktop/Experimental.R')
whichDeme
rm(list = ls())
source('~/Desktop/Experimental.R')
whichDeme
phageProgeny
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
t
p = 15
listTableGraphing[[p]][length(listTableGraphing[[p]])])
listTableGraphing[[p]][length(listTableGraphing[[p]])]
listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]
length(listTableGraphing)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
p = 31
listTableGraphing[[p]][length(listTableGraphing[[p]]) - 1]
listTableGraphing[[p]][length(listTableGraphing[[p]])]
rm(list = ls())
listTableBacteriaDensity = c()
g = 1
listTableBacteriaDensity[[g]] = rep(0, length(seq(0, 10^7, 100)))
listTableBacteriaDensity
listTableBacteriaDensity[[2]] = rep(0, length(seq(0, 10^7, 100)))
listTableBacteriaDensity
rm(list = ls())
source('~/Desktop/Experimental.R')
p
length(listTableGraphing)
rm(list = ls())
source('~/Desktop/Experimental.R')
p
t
rm(list = ls())
source('~/Desktop/Experimental.R')
p
1:(length(listTableGraphing))
rm(list = ls())
source('~/Desktop/Experimental.R')
p
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
source('~/Desktop/Experimental.R')
t
rm
rm(list = ls())
source('~/Desktop/Experimental.R')
rm(list = ls())
source('~/Desktop/Experimental.R')
p
listTable
listTableGraphing
rm(list = ls())
source('~/Desktop/Experimental.R')
listTableBacteriaDensity
plot(seq(from = 0, to = 10^7, by = 100), listTableBacteriaDensity)
length(listTableBacteriaDensity)
listTableBacteriaDensity
plot(seq(from = 0, to = 10^7, by = 100), listTableBacteriaDensity[2])
plot(seq(from = 0, to = 10^7, by = 100), listTableBacteriaDensity[[2]])
rm(list = ls())
?lines
load("Saved Data3.Rdata")
listTableGraphing
rm(list = ls())
rpois(1, 100)
rpois(100, 100)
110 * 30
intersect(which(phageProgeny == listTableGraphing[[p]][1]), which(whichDeme == listTableGraphing[[p]][2])
intersect(which(phageProgeny == listTableGraphing[[p]][1]), which(whichDeme == listTableGraphing[[p]][2]))
rm(list = ls())
colors()
rainbow()
rainbow(5)
pie(rep(1,n), col=rainbow(n))
col2rgb("white")
col2rgb("antiquewhite1")
col2rgb(colors())
rainbow(100)
color = c("blue", "chartreuse", "darkorchid", "orange", "slategray4", "yellow", "violetred1", "salmon4", "darkslategray3", "magenta2")
color
color = c(color, rainbow(10))
color
topo.colors(100)
color = c("blue", "chartreuse", "darkorchid", "orange", "slategray4", "yellow", "violetred1", "salmon4", "darkslategray3", "magenta2", rainbow(10), topo.colors(10))
length(color)
color
color = c("blue", "chartreuse", "darkorchid", "orange", "slategray4", "yellow", "violetred1", "salmon4", "darkslategray3", "magenta2", rainbow(20), topo.colors(20))
length(color)
length(which(rpois(10^(6), (10^(-3))) == 1))
length(which(rpois(10^(6), (10^(-3))) == 1))
length(which(rpois(10^(6), (10^(-3))) == 1))
length(which(rpois(10^(6), (10^(-3))) == 1))
length(which(rpois(10^(6), (10^(-3))) == 1))
1000/(10^(6))
10^(-3)
1 - exp(-10^(3))
1 - exp(-10^(3))
1 - exp(-10^(-3))
?exp()
1 - exp(-c(10^(-8:-1)))
length(which(rpois(10^(6), (10^(-3))) == 1))
rpois(1, 10^(6) * 10^(-3))
rpois(100, 10^(6) * 10^(-3))
rpois(100, 2 * 10^(-3))
# a fraction of new phages that are mutants
mutantPhages = rpois(length(newPhages), mutationRate * newPhages * deltaT)
rpois(4, 10^(-3))
rm(list = ls())
pnorm( 0.5, mean = 0, sd = 1)
pnorm(0.25, mean = 0, sd = 1)
pnorm(1, mean = 0, sd = 1)
pnorm(0, mean = 0, sd = 1)
pnorm(seq(-1,1,0.25), mean = 0, sd = 1)
pnorm(seq(-2,2,0.25), mean = 0, sd = 1)
rm(list = ls())
load("Saved Data3.Rdata")
freePhages
t
?norm
?pnorm
sd(freePhages)
sd(phageProgeny)
sd(phageProgeny, mean = 3)
?weighted.mean
weighted.mean(phageProgeny, freePhages)
phageProgeny
freePhages
?sd
?pnorm
rnorm(100, 76.2, 5)
t = c(0.45,0.6,0.61,0.54,0.49,0.53,0.71,0.62,0.41,0.59,0.7,0.6,0.58,0.52,0.61,0.74,0.69,0.64,0.53,0.73,0.81,0.67,0.54,0.84)
2.967/t
sum(2.967/t)/length(t)
sd(t)
sd(2.967/t)
rm(list = ls())
colorRampPalette(heat.colors(100))
plot(c(1:100), c(1:100))
colorRampPalette(heat.colors(10))[1:100]
pal = colorRampPalette(heat.colors(10))
plot(c(1:100), c(1:100), col = pal(1:100))
pal
pal = colorRampPalette(heat.colors(10))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(heat.colors(100))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(heat.colors(100))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "red"))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(c("blue", "red"))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(c("blue","white", "red"))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(c("blue","yellow", "red"))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(rainbow(7))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(rainbow(7))
plot(c(1:100), c(1:100), col = pal(length(1:100)))
pal = colorRampPalette(rainbow(7))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "green", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "green", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
?colorRampPalette
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 4)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 4)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 2)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 1)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 10)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"), bias = 0)
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("black","blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:3), c(1:3), col = pal(length(1:3)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
?colorRampPalette
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"), interpolate = c("linear"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"), interpolate = c("spline"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
pal = colorRampPalette(heat.colors(50))#c("blue", "cyan","green","yellow", "red"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:50), c(1:50), col = pal(length(1:50)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal
pal(10)
pal = colorRampPalette(rainbow(100))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(rev(rainbow(100)))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(rainbow(100))#c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "cyan","green","yellow", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal = colorRampPalette(c("blue", "cyan","green","yellow","orange", "red"))
plot(c(1:1000), c(1:1000), col = pal(length(1:1000)))
pal(50)[1]
length(which(listTableGraphing[[o]][(which(listTableGraphing[[o]][5:length(listTableGraphing[[o]])] > 0)[h-1]):(which(listTableGraphing[[o]][5:length(listTableGraphing[[o]])] > 0)[h])] > 10^(3))) == 0
rm(list = ls())
log10(1)
log10(0)
log10(10^(-5))
log10(10^(-1))
rm(list = ls())
5*10^(4)
biodiversity[length(biodiversity)]
?weighted.mean()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(data.table)
library(data.table)
# get the counts (this is a comment it's just here for you to read)
counts <- nyc_films %>%
group_by(SubCategoryName) %>%
summarize(count_of_permits = length(SubCategoryName))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list = ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list = ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list = ls())
source('~/Desktop/Experimental 2.R')
points(1,2)
points(1,2, pch=21)
points(1,2, pch=21)
points(1,4)
points(10,4)
points(10,4)
points(9,4)
points(5,4)
points(2,4)
points(400000,4)
points(400000,800)
points(2000000,800)
points(2000000,900)
points(2000000,1600)
source('~/.active-rstudio-document')
rm(list = ls())
source('~/.active-rstudio-document')
rm(list = ls())
source('~/Desktop/Experimental 2.R')
getwd()
a = c(6, 3, 14, 15, 10, 5, 7, 12, 11)
total = 0
for (o in 1:length(a)) {
y = a[o] - mean(a)
total = total + y
}
print(total)
mean(a)
a = c(14, 20, 7, 2, 13, 1, 17, 15, 4)
total = 0
for (o in 1:length(a)) {
y = abs(a[o] - mean(a))
total = total + y
}
print(total)
source('~/.active-rstudio-document')
install.packages("rmarkdown")
install.packages("rmarkdown")
getwd()
source('~/Desktop/Honors/build_site.R')
source('~/Desktop/Honors/build_site.R')
getwd()
source('~/Desktop/Honors/build_site.R')
source('~/Desktop/Honors/build_site.R')
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
listOfNumbers = c(1:100)
which(listOfNumbers %% 3 == 0)
listOfNumbers = c(1:100)
divisibleByThree = which(listOfNumbers %% 3 == 0)
divisibleByFive = which(listOfNumbers %% 5 == 0)
divisibleByThreeAndFive = which(listOfNumbers %% 3 == 0 && listOfNumbers %% 5 == 0)
divisibleByThreeAndFive
divisibleByFive
listOfNumbers = c(1:100)
divisibleByThree = which(listOfNumbers %% 3 == 0)
divisibleByFive = which(listOfNumbers %% 5 == 0)
divisibleByThreeAndFive = intersect(which(listOfNumbers %% 3 == 0), which(listOfNumbers %% 5 == 0))
divisibleByThreeAndFive
divisibleByFive
divisibleByThreeAndFive
listOfNumbers[divisibleByThree] = "Fizz"
listOfNumbers
listOfNumbers = c(1:100)
divisibleByThree = which(listOfNumbers %% 3 == 0)
divisibleByFive = which(listOfNumbers %% 5 == 0)
divisibleByThreeAndFive = intersect(which(listOfNumbers %% 3 == 0), which(listOfNumbers %% 5 == 0))
listOfNumbers[divisibleByThree] = "Fizz"
listOfNumbers[divisibleByFive] = "Buzz"
listOfNumbers[divisibleByThreeAndFive] = "FizzBuzz"
print(listOfNumbers)
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
source('~/Honors/build_site.R')
